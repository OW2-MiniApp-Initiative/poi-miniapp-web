<script>

  var CARDS_CONTAINER_ID = 'card-list'; 
  var MAPS_CONTAINER_ID = 'osm'; 
  var DETAILS_MODAL_ID = 'modal_detail'; 
 
  // Global variables
  var myPosition = { lat: 0, lon: 0};
  var pois = [];
  
  // Populate all the pois into the global "pois" variable    
  <% pois.forEach(function(poi) { %>pois.push(<%- JSON.stringify(poi)%>);<% }); %>

  /**
   * Creates a list of cards within the containerId
   * Firstly, it removes the content
   */  
  function createCardList(containerId, pois) {
    $( `#${containerId}` ).remove( "div.col" );
    pois.forEach((poi) => {
      $( `#${containerId}` )
      .append( $( "<div class='col s12 m6 l4 xl3'>" )
        .append( $( "<div class='card small hoverable'></div>" )
          .append( $( "<div class='card-image'></div>" )
            .append( $( "<img/>" )
              .attr( "src" , ((poi.images.length) > 0)? poi.images[0] : "/public/images/placeholder.jpg")
              .attr( "alt" , poi.name )
            )
            .append( $( "<span class='card-title'></span>" ).text(poi.name) )
          )
          .append( $( "<div class='card-content'></div>" )
            .append( $( "<p class='card-distance'></p>" ).text(`${prettifyDistance(poi.distance)}`) )
            .append( $( "<p></p>" ).text(poi.description) )
          )
          .append( $( "<div class='card-action'></div>" )
            .append( $( "<a></a>" )
              .attr( "href", `#` )
              .attr( "onclick", `populateOpenDetailDialog('${poi.id}')` )
              .text( "<%= i18n.t('cards.details') %>" )
            )
            .append( $( "<a href='#'></a>" )
              .attr( "onclick", `openMapOn('${poi.id}')` )
              .text( "<%= i18n.t('cards.on_map') %>" )
            )
          )
        )
      );
    })
  }

  const uaSupportsQuickApp = (ua) => {
    return ((ua.indexOf("huawei") >= 0 || ua.indexOf("honor") >= 0) && (ua.indexOf("android") >= 0));
  }

  // to avoid malfunction of map once itÂ´s resized
  function invalidateSizeMap() {
    map.invalidateSize();
  };

  // Init materialize components once the page is loaded
  function initMaterializeComponents() {
    $('.sidenav').sidenav();
    $('.modal-detail').modal({dismissible:true, preventScrolling: true});
    $('#modalinit').modal({dismissible:false, opacity: 0.8, preventScrolling: true});
    $('#modalabout').modal({dismissible:false, preventScrolling: true});
    $('.tabs').tabs({ onShow: invalidateSizeMap} );
  }

  function reorderPoisByDistance() {
    pois.sort((a, b) => a.distance - b.distance);
  }

  // Sets the distance in all the POIs, in a new attribute `distance` (in metres)
  function updateDistancePoIs() {
    pois.forEach((poi, index) => {
      if (myPosition.lat !== 0 && myPosition.lon !== 0) {
        pois[index].distance =  window.geolib.getDistance(
          { latitude: myPosition.lat, longitude: myPosition.lon },
          { latitude: poi.lat, longitude: poi.lon });
      }
    });
    reorderPoisByDistance();
  }

    /**
   * Includes the information of the current selected POI in the 
   * details dialog. And open the dialog.
   */ 
   function populateOpenDetailDialog(poiId) {
    var poi = pois.find( el => el.id === poiId );
    if (!poi) return;
    // The image
    if (poi.images.length > 0) {
      $( `#${DETAILS_MODAL_ID} img` ).attr("src" , poi.images[0]).attr("alt", poi.name);
    } else {
      $( `#${DETAILS_MODAL_ID} img`).attr("src" , "/public/images/placeholder.jpg").attr("alt", poi.name);
    }
    // title
    $( `#${DETAILS_MODAL_ID} .modal-detail-name` ).text( poi.name );
    // distance
    $( `#${DETAILS_MODAL_ID} .card-distance-value` ).text( poi.distance );
    // descriptions
    $( `#${DETAILS_MODAL_ID} .card-description` ).text( poi.description );
    $( `#${DETAILS_MODAL_ID} .card-description-more` ).text( poi.more );
    // Links
    $( `#${DETAILS_MODAL_ID} .links` ).remove( "li" );
    if (poi.urls && poi.urls.length>0) {
      poi.urls.forEach(url => {
        $( `#${DETAILS_MODAL_ID} .links` )
          .append( $( "<li></li>" )
            .append( $( "<a class='truncate'></a>" ).attr( "href", url ).text(url) ) 
          );    
      });
    }
    // Attributions
    $( `#${DETAILS_MODAL_ID} ul.attributions` ).remove( "li" );
    if (poi.attributions && poi.attributions.length>0) {
      poi.attributions.forEach(attribution => {
        $( `#${DETAILS_MODAL_ID} ul.attributions` )
          .append( $( "<li></li>" ).text(attribution) ) 
      });
      $( `#${DETAILS_MODAL_ID} p.attributions` ).show();
    } else {
      // hide the introductory text
      $( `#${DETAILS_MODAL_ID} p.attributions` ).hide();
    }
    $( `#${DETAILS_MODAL_ID}` ).modal('open');
  }

  /**
   * Checks if the app must open the dialog with a POI at init.
   * Opens the modal if the ID is passed and found in the POI list
   */
  function openModalIdAtInit() {
    var identifier = "<%= identifier %>";
    populateOpenDetailDialog(identifier);
    // Otherwise do nothing
  }

  /**
   * Converts the meters into a more friendly string (in metres or kms)
   * @param {integer} value with the distance in metres 
   * @returns a string with the value in human-readable format (metres, or kms)
   */
   function prettifyDistance(value) { 
    try {
      const number = parseInt(value);
      if (number > 1000) {
        return `${(value/1000).toFixed(2)} Km. <%= i18n.t('cards.distance') %>`;        
      }
    } catch (ex) {
      return '';
    }
    return `${value} m. <%= i18n.t('cards.distance') %>`;        
  }

  /** 
   * Document on ready
   */ 
  $(function(){

    initMaterializeComponents();

    if ('geolocation' in navigator) {
      $('#modalinit').modal('open');
      navigator.geolocation.getCurrentPosition((position) => {
        $('#modalinit').modal('close');
        // console.log(position.coords.latitude + " " + position.coords.longitude);
        myPosition.lat = position.coords.latitude;
        myPosition.lon = position.coords.longitude
        updateDistancePoIs();
        createCardList(CARDS_CONTAINER_ID, pois);
        // Opens the dialog by default
        openModalIdAtInit();
      });
    } else {
      /* geolocation IS NOT available */
      console.error('geolocation IS NOT available')
    }

    if (uaSupportsQuickApp(navigator.userAgent.toLowerCase())) {
      $('.quick-app-link').show();
    } else {
      $('.quick-app-link').hide();
    }
    
  }); // end of document ready

</script>
