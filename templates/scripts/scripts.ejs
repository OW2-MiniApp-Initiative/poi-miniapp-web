<script>
  var CARDS_CONTAINER_ID = 'card-list'; 
  var MAPS_CONTAINER_ID = 'osm'; 
  var DETAILS_MODAL_ID = 'modal_detail'; 
 
  // Global variables
  var myPosition = { lat: 0, lon: 0};
  var pois = [];
  var dataUrl = '<%= url %>';
  var issue_url = '<%= app.issue_url %>';
  var townId = '<%= townId %>';
  var locale = '<%= locale %>';
  
  // Populate all the pois into the global "pois" variable    
  <% pois.forEach(function(poi) { %>
    pois.push(<%- JSON.stringify(poi)%>);<% }); %>

  /**
   * Creates a list of cards within the containerId
   * Firstly, it removes the content
   */  
  function createCardList(containerId, pois) {
    $( `#${containerId} div.col` ).remove( );
    pois.forEach((poi) => {
      $( `#${containerId}` )
      .append( $( "<div class='col s12 m6 l4 xl3'>" )
        .append( $( "<div class='card card-item hoverable'></div>" )
          .append( $( "<div class='card-image'></div>" ).attr( "onclick", `populateOpenDetailDialog('${poi.id}')` )
            .append( $( "<img/>" )
              .attr( "src" , ((poi.images.length) > 0)? poi.images[0] : "/public/images/placeholder.jpg")
              .attr( "alt" , poi.name )
            )
            .append( $( "<span class='card-title'></span>" ).text(poi.name) )
          )
          .append( $( "<div class='card-content'></div>" ).attr( "onclick", `populateOpenDetailDialog('${poi.id}')` )
            .append( $( "<p class='card-distance'></p>" ).text(`${poi.type} - ${prettifyDistance(poi.distance)}`) )
            .append( $( "<p></p>" ).text(poi.description) )
          )
          .append( $( "<div class='card-action'></div>" )
            .append( $( "<a></a>" )
              .attr( "href", `#` )
              .attr( "onclick", `populateOpenDetailDialog('${poi.id}')` )
              .text( "<%= i18n.t('cards.details') %>" )
            )
            .append( $( "<a href='#'></a>" )
              .attr( "onclick", `openMapOn('${poi.id}')` )
              .text( "<%= i18n.t('cards.on_map') %>" )
            )
          )
        )
      );
    })
  }

  /**
   * Checks if the UA supports quick apps. 
   * So far, it only checks if the UA is Huawei or Honor.
   */  
  const uaSupportsQuickApp = (ua) => {
    return ((ua.indexOf("huawei") >= 0 || ua.indexOf("honor") >= 0) && (ua.indexOf("android") >= 0));
  }

  // to avoid malfunction of map once itÂ´s resized
  function invalidateSizeMap() {
    map.invalidateSize();
  };

  // Init materialize components once the page is loaded
  function initMaterializeComponents() {
    $('.sidenav').sidenav();
    $('#modal-quickapp').modal({dismissible:false, preventScrolling: true});
    $('.modal-detail').modal({dismissible:true, preventScrolling: true, onOpenEnd: initModalDetail});
    $('#modal-init').modal({dismissible:false, opacity: 0.8, preventScrolling: true});
    $('#modal-intro-geolocation').modal({dismissible:false, opacity: 0.8, preventScrolling: true });
    $('#modal-about').modal({dismissible:false, preventScrolling: true});
    $('#modal-lang').modal({dismissible:true});
    $('.tabs').tabs({ onShow: invalidateSizeMap} );
  }

  function initModalDetail() {
    $('.materialboxed').materialbox();
    // Force scrolls up
    $(`#${DETAILS_MODAL_ID} .modal-content`).scrollTop(0);
  }

  function reorderPoisByDistance() {
    pois.sort((a, b) => a.distance - b.distance);
  }

  // Sets the distance in all the POIs, in a new attribute `distance` (in metres)
  function updateDistancePoIs() {
    pois.forEach((poi, index) => {
      if (myPosition.lat !== 0 && myPosition.lon !== 0) {
        pois[index].distance =  window.geolib.getDistance(
          { latitude: myPosition.lat, longitude: myPosition.lon },
          { latitude: poi.lat, longitude: poi.lon });
      }
    });
    reorderPoisByDistance();
  }

    /**
   * Includes the information of the current selected POI in the 
   * details dialog. And open the dialog.
   */ 
   function populateOpenDetailDialog(poiId) {
    var poi = pois.find( el => el.id === poiId );
    if (!poi) return;
    // The images (first removes the existing ones)
    $( `#${DETAILS_MODAL_ID} .gallery div` ).remove();
    const imgNum = poi.images.length;
    if (imgNum > 0) {
      var imgClass = 'col s12 m6 l4';
      if (imgNum === 1) {
        imgClass = 'col s12 m12 l12';
      } else if (imgNum === 2) {
        imgClass = 'col s12 m6 l6';
      }
      poi.images.forEach(function (img, index) {
        $( `#${DETAILS_MODAL_ID} .gallery` )
          .append( $( `<div class="${imgClass}"></div>` )
            .append( $('<img class="materialboxed responsive-img card"/>').attr("src" , img).attr("alt", poi.name) ) );
      })
    } else {
      $( `#${DETAILS_MODAL_ID} .gallery` )
          .append( $( '<div class="col s12 m12 l12"></div>' )
            .append( $('<img class="materialboxed responsive-img card"/>').attr("src" , "/public/images/placeholder.jpg").attr("alt", poi.name) ) );
    }
    // title
    $( `#${DETAILS_MODAL_ID} .modal-detail-name` ).text( poi.name );
    // distance
    $( `#${DETAILS_MODAL_ID} .card-distance-value` ).text( prettifyDistance(poi.distance) );
    // descriptions
    $( `#${DETAILS_MODAL_ID} .card-description` ).text( poi.description );
    $( `#${DETAILS_MODAL_ID} .card-description-more` ).text( poi.more );
    // type
    $( `#${DETAILS_MODAL_ID} .type` ).text( poi.type );
    // Links
    $( `#${DETAILS_MODAL_ID} .links li` ).remove();
    if (poi.urls && poi.urls.length>0) {
      poi.urls.forEach(url => {
        $( `#${DETAILS_MODAL_ID} .links` )
          .append( $( "<li></li>" )
            .append( $( "<a class='truncate'></a>" ).attr( "href", url ).text(url) ) 
          );    
      });
    }
    // Attributions
    $( `#${DETAILS_MODAL_ID} ul.attributions li` ).remove();
    if (poi.attributions && poi.attributions.length>0) {
      poi.attributions.forEach(attribution => {
        $( `#${DETAILS_MODAL_ID} ul.attributions` )
          .append( $( "<li></li>" ).text(attribution) ) 
      });
      $( `#${DETAILS_MODAL_ID} p.attributions` ).show();
    } else {
      // hide the introductory text
      $( `#${DETAILS_MODAL_ID} p.attributions` ).hide();
    }
    // Wikidata
    if (poi.wikidata) {
      $( `#${DETAILS_MODAL_ID} .wikidata a` ).attr( "href" , `https://www.wikidata.org/wiki/${poi.wikidata}` );
      $( `#${DETAILS_MODAL_ID} .wikidata` ).show();
    } else {
      $( `#${DETAILS_MODAL_ID} .wikidata` ).hide();
    }
    // The share button
    if (navigator.canShare) {
      $( `#${DETAILS_MODAL_ID} .share-button` ).attr( 'onclick' , `shareDetails({name: '${poi.name.replace(/["']/g, "")}', description:'${poi.description.replace(/["']/g, "")}', id:'${poi.id}'})`);    
    } else {
      $( `#${DETAILS_MODAL_ID} .share-button` ).hide();
    }
    // The feedback button
    $( `#${DETAILS_MODAL_ID} .feedback-button` ).attr( 'href' , `${issue_url}${poi.id}`);
    // Permalink
    var permalink = getPermalink(poi.id);
    $( `#${DETAILS_MODAL_ID} a.permalink` ).attr( 'href' , permalink).text(permalink);
    setTimeout(function() {
      $( `#${DETAILS_MODAL_ID}` ).modal('open');
    }, 400);
  }

  /**
   * Get the permalink to the PoI identified with 'id'
   */ 
  function getPermalink(id) {
    // it could be either "/_/lang?url..." or "/town_id/"
    if (townId && townId.length>0) {
      return `${(window.location.protocol)}//${(window.location.host)}/${townId}/${locale}/?id=${id}`;
    } else  
    return `${(window.location.protocol)}//${(window.location.host)}/_/${locale}/?url=${encodeURIComponent(dataUrl)}&id=${id}`;
  }

  /**
   * Share information about a PoI using the Share API
   */ 
  function shareDetails({ name, description, id }) {
    var urlShare = getPermalink(id);
    var shareData = {
        title: name,
        text: description,
        url: urlShare,
      };
    try {
      navigator.share(shareData);
    } catch (e) {
      console.log('ERROR: cannot share data');
    }
  } 

  /**
   * Checks if the app must open the dialog with a POI at init.
   * Opens the modal if the ID is passed and found in the POI list
   */
  function openModalIdAtInit() {
    var identifier = "<%= identifier %>";
    populateOpenDetailDialog(identifier);
    // Otherwise do nothing
  }

  /**
   * Converts the meters into a more friendly string (in metres or kms)
   * @param {integer} value with the distance in metres 
   * @returns a string with the value in human-readable format (metres, or kms)
   */
   function prettifyDistance(value) { 
    try {
      const number = parseInt(value);
      if (number > 1000) {
        return `${(value/1000).toFixed(2)} Km. <%= i18n.t('cards.distance') %>`;        
      }
    } catch (ex) {
      return '';
    }
    return `${value} m. <%= i18n.t('cards.distance') %>`;        
  }

  /**
   * If the device supports Quick Apps, show the options to launch
   * the application as a quick app.
   */ 
  function showQuickAppOptions() {
    if (uaSupportsQuickApp(navigator.userAgent.toLowerCase())) {
      $('.btn-quickapp').show();
      $('#modal-quickapp').modal('open');
    } else {
      $('.btn-quickapp').hide();
    }
  }

  /**
   * Close the init modals
   */  
  function closeInitModals() {
    $('#modal-init').modal('close');
    $('#modal-intro-geolocation').modal('close');
  }

  /**
   * The user will be asked for granting permission to use
   * the geolocation. Otherwise they cannot continue.
   * The dialogs will be closed once the geolocation is enabled. 
   * Function to locate the user and calculates the distance
   * of the PoIs. This will be run before the user interacts with 
   * the app.
   */  
  function locateUserAndInitPois() {
    // Activates the loading indicator
    $('#modal-intro-geolocation .loading-app').addClass('active');

    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {
        // console.log(position.coords.latitude + " " + position.coords.longitude);
        myPosition.lat = position.coords.latitude;
        myPosition.lon = position.coords.longitude
        updateDistancePoIs();
        createCardList(CARDS_CONTAINER_ID, pois);
        closeInitModals();
        // Opens the dialog by default
        openModalIdAtInit();
        showQuickAppOptions();
      });
    } else {
      /* geolocation IS NOT available */
      console.error('geolocation IS NOT available')
      $('#modal-intro-geolocation').modal('open');
    }
  }

  /** 
   * Document on ready
   */ 
  $(function(){
    // Init Materialize CSS
    initMaterializeComponents();
    // First checks if the user read the intro
    if (!localStorage.getItem('iWasHere')) {
      $('#modal-intro-geolocation').modal('open');
      localStorage.setItem('iWasHere', 'true');
    } else {
      $('#modal-init').modal('open');
      locateUserAndInitPois();
    }
  }); // end of document ready

</script>
